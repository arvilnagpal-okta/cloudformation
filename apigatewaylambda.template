{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS CloudFormation template that contains a single Lambda function behind an API Gateway for Okta Sync Callbacks",
  "Resources": {
    "CommandsLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": {
            "Fn::Join": ["\n", [
              "'use strict';",
              "",
              "// Commands Lambda",
              "exports.handler = (event, context, callback) => {",
              "  console.log('Event:', JSON.stringify(event));",
              "  //Put your commands here",
              "  const response = {commands: [{}]};",
              "  callback(null, response);",
              "};"
            ]]
          }
        },
        "Description": "A Lambda that returns Okta Commands for testing sync callbacks",
        "FunctionName": "CommandsLambda",
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": ["LambdaExecutionRole", "Arn"]
        },
        "Runtime": "nodejs4.3"
      }
    },
    "LambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {
              "Service": ["lambda.amazonaws.com"]
            },
            "Action": ["sts:AssumeRole"]
          }]
        },
        "ManagedPolicyArns": ["arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"]
      }
    },
    "CommandsApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "Commands API",
        "Description": "API used for returning commands to okta sync callback requests",
        "FailOnWarnings": true
      }
    },
    "LambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {
          "Fn::GetAtt": ["CommandsLambda", "Arn"]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": ["", ["arn:aws:execute-api:", {
            "Ref": "AWS::Region"
          }, ":", {
            "Ref": "AWS::AccountId"
          }, ":", {
            "Ref": "CommandsApi"
          }, "/*"]]
        }
      }
    },
    "ApiGatewayCloudWatchLogsRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {
              "Service": ["apigateway.amazonaws.com"]
            },
            "Action": ["sts:AssumeRole"]
          }]
        },
        "Policies": [{
          "PolicyName": "ApiGatewayLogsPolicy",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:DescribeLogGroups",
                "logs:DescribeLogStreams",
                "logs:PutLogEvents",
                "logs:GetLogEvents",
                "logs:FilterLogEvents"
              ],
              "Resource": "*"
            }]
          }
        }]
      }
    },
    "ApiGatewayAccount": {
      "Type": "AWS::ApiGateway::Account",
      "Properties": {
        "CloudWatchRoleArn": {
          "Fn::GetAtt": ["ApiGatewayCloudWatchLogsRole", "Arn"]
        }
      }
    },
    "CommandsApiStage": {
      "DependsOn": ["ApiGatewayAccount"],
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "DeploymentId": {
          "Ref": "ApiDeployment"
        },
        "MethodSettings": [{
          "DataTraceEnabled": true,
          "HttpMethod": "*",
          "LoggingLevel": "INFO",
          "ResourcePath": "/*"
        }],
        "RestApiId": {
          "Ref": "CommandsApi"
        },
        "StageName": "LATEST"
      }
    },
    "ApiDeployment": {
      "Type": "AWS::ApiGateway::Deployment",
      "DependsOn": ["CommandsRequest"],
      "Properties": {
        "RestApiId": {
          "Ref": "CommandsApi"
        },
        "StageName": "DummyStage"
      }
    },
    "CommandsResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {
          "Ref": "CommandsApi"
        },
        "ParentId": {
          "Fn::GetAtt": ["CommandsApi", "RootResourceId"]
        },
        "PathPart": "commands"
      }
    },
    "CommandsRequest": {
      "DependsOn": "LambdaPermission",
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "POST",
        "Integration": {
          "Type": "AWS_PROXY",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": ["", ["arn:aws:apigateway:", {
              "Ref": "AWS::Region"
            }, ":lambda:path/2015-03-31/functions/", {
              "Fn::GetAtt": ["CommandsLambda", "Arn"]
            }, "/invocations"]]
          },
          "IntegrationResponses": [{
            "StatusCode": 200
          }],
          "RequestTemplates": {
            "application/json": {
              "Fn::Join": ["", [
                "{",
                "  \"name\": \"$input.params('name')\"",
                "}"
              ]]
            }
          }
        },
        "RequestParameters": {
          "method.request.querystring.name": false
        },
        "ResourceId": {
          "Ref": "CommandsResource"
        },
        "RestApiId": {
          "Ref": "CommandsApi"
        },
        "MethodResponses": [{
          "StatusCode": 200
        }]
      }
    }
  },

  "Outputs": {
    "RootUrl": {
      "Description": "Root URL of the API gateway",
      "Value": {
        "Fn::Join": ["", ["https://", {
          "Ref": "CommandsApi"
        }, ".execute-api.", {
          "Ref": "AWS::Region"
        }, ".amazonaws.com"]]
      }
    }
  }
}
